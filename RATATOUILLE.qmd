---
title: "Mini Project 3"
sidebar: false
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE, warning=FALSE}
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(tidytext)
library(textdata)
library(ggplot2)
library(tm)
library(knitr)
library(kableExtra)
library(circlize)
library(wordcloud)
library(viridis)
library(rvest)
library(plotly)
```

```{r, include=FALSE}
ratatouille <- read_csv("RATATOUILLE - Sheet1.csv")

ratatouille <- ratatouille |>
  mutate(word = str_split(RAT, "\\s+")) |>
  unnest(word)

ratatouille<-ratatouille|>
  select(word)

ratatouille<-ratatouille|>
  mutate(id = 1:7526)|>
  print(n=7526)


ratatouille|>
  distinct(word)
```

Did you know that in the Ratatouille movie, only 7,526 words were spoken? According to a Reddit [post](https://www.reddit.com/r/Screenwriting/comments/od3v7h/wordcounts_of_famous_screenplays/), the average screenplay has about 22,000 words(although Reddit is definitely not the most reliable source). Within those 7,526 words in Ratatouille, there were 2,193 distinct words spoken. This may seem like very few, but any Ratatouille lover knows how impactful those 2,193 different words were.

```{r, message=FALSE, echo=FALSE}
sentiment_scores <- ratatouille |>
  inner_join(get_sentiments("afinn"), by = "word") |>
  group_by(id) |>
  summarise(sentiment_score = sum(value))

sentiment_scores <- sentiment_scores |>
  mutate(sentiment = ifelse(sentiment_score > 0, "Positive",
                            ifelse(sentiment_score < 0, "Negative", "Neutral")))

sentiment_rat <- inner_join(ratatouille, sentiment_scores, by = "id")|>
  select(-id)

sentiment_rat<-distinct(sentiment_rat)

sentiment_rat|>
  group_by(sentiment)|>
  mutate(n_words=n())|>
  ggplot(aes(x = word, y = sentiment_score, fill = sentiment)) +
  geom_bar(stat = "identity") +
  labs(title = "Sentiment Analysis",
       x = "Words",
       y = "Score") +
  theme_minimal()+
  theme(axis.text.x = element_blank())+
  guides(fill = guide_legend(reverse = TRUE))+
  scale_fill_manual(values = c("Positive" = "deeppink", "Negative" = "darkred"))

```

The above graph is a sentiment analysis of all of the words in Ratatouille. To find this, I used a sentiment library that ranks common words on a scale of -3 to 3, respectively negative to positive sentiment. I inner joined that dataset with my dataset of Ratatouille words to find their sentiments. We can see that a little over half of the Ratatouille words have positive connotations. This makes sense since it is overall a happy movie, although there is a lot of yelling from the head chef which would contribute to the good chunk of negativity. This graph has the words in order of appearance, so the left is the beginning of the movie, and as the movie progresses, we move to the right. We can see areas where the movie was more positive, and also areas that were more negative.

```{r, echo=FALSE}
chef_occurrences <- str_detect(ratatouille$word, "[Cc]hef")

gusteau_occurrences <- str_detect(ratatouille$word, "[Gg]usteau")

rat_occurrences <- str_detect(ratatouille$word, "[Rr]at")

cook_occurrences <- str_detect(ratatouille$word, "[Cc]ook")

dad_occurrences <- str_detect(ratatouille$word, "[Dd]ad")


chef_yes <- data.frame(row = which(chef_occurrences), chef_occurs = TRUE)
chef_no <- data.frame(row = which(!chef_occurrences), chef_occurs = FALSE)

gusteau_yes <- data.frame(row = which(gusteau_occurrences), gusteau_occurs=TRUE)
gusteau_no <- data.frame(row = which(!gusteau_occurrences), gusteau_occurs=FALSE)

rat_yes <- data.frame(row = which(rat_occurrences), rat_occurs=TRUE)
rat_no <- data.frame(row = which(!rat_occurrences), rat_occurs=FALSE)

cook_yes <- data.frame(row = which(cook_occurrences), cook_occurs=TRUE)
cook_no <- data.frame(row = which(!cook_occurrences), cook_occurs=FALSE)

dad_yes <- data.frame(row = which(dad_occurrences), dad_occurs=TRUE)
dad_no <- data.frame(row = which(!dad_occurrences), dad_occurs=FALSE)

ggplot() +
  geom_point(data = chef_no, aes(x = row, y = "Chef", color = "Chef No"), size = 2, alpha = 0.5) +
  geom_jitter(data = chef_yes, width=0, height=0.025, alpha=0.7, aes(x = row, y = "Chef", color = "Chef Yes"), size = 2) +
  geom_point(data = gusteau_no, aes(x = row, y = "Gusteau", color = "Gusteau No"), size = 2, alpha = 0.5) +
  geom_jitter(data = gusteau_yes, width=0, height=0.025, aes(x = row, y = "Gusteau", color = "Gusteau Yes"), size = 2) +
  geom_point(data = rat_no, aes(x = row, y = "Rat", color = "Rat No"), size = 2) +
  geom_jitter(data = rat_yes, width=0, height=0.025, alpha=0.7, aes(x = row, y = "Rat", color = "Rat Yes"), size = 2) +
  geom_point(data = cook_no, aes(x = row, y = "Cook", color = "Cook No"), size = 2) +
  geom_jitter(data = cook_yes, width=0, height=0.025, alpha=0.7, aes(x = row, y = "Cook", color = "Cook Yes"), size = 2) +
  geom_point(data = dad_no, aes(x = row, y = "Dad", color = "Dad No"), size = 2) +
  geom_jitter(data = dad_yes, width=0, height=0.025, alpha=0.7, aes(x = row, y = "Dad", color = "Dad Yes"), size = 2) +
  
  scale_color_manual(values = c("Chef No" = "black", "Chef Yes" = "deeppink",
                                 "Gusteau No" = "black", "Gusteau Yes" = "deeppink",
                                 "Rat No" = "black", "Rat Yes" = "deeppink",
                                 "Cook No" = "black", "Cook Yes" = "deeppink",
                                 "Dad No" = "black", "Dad Yes" = "deeppink")) +
    scale_y_discrete(labels=c("Dad"="Dad", "Cook"="Cook", "Rat"="Rat", "Gusteau"="Gusteau", "Chef"="Chef")) +
  labs(title = "Occurance of top words during the movie",
       x = "Row number", y = "Word") +
  theme_minimal()+
  theme(legend.position="none")

```

Below we see a table with the 10 most used words in Ratatouille. To do this, I removed the stop words (common words that generally don't hold significance like "the") from the data and I ranked the leftover words by amount used. Unsurprisingly, we see that 3 of the words have to do with food, as it is a food movie. We also see that names/nicknames come up a lot, with Remy, Gusteau, Linguini and dad all making appearances. We see that both Gusteau and Gusteau's are on the list because R treats them like different words, but adding them together would put Gusteau to 40 occurances and in second place behind chef. Rat is also fairly expected since the whole plot of the movie is about a rat. Somewhat surprising, however, is the word hey. I would think that it would be considered a stop word, however the set of stop words I used did not include it.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
distinct_rat<-ratatouille|> mutate(word=str_to_lower(word),
                     word = gsub("([[:punct:]])(?=[^[:alnum:]]*$)", "", word, perl = TRUE))|>
  count(word, sort=TRUE)|>
  anti_join(stop_words)|>
  slice(2:999)

sliced_rat<-distinct_rat|>
  slice(1:10)


kable(t(sliced_rat), format = "html")|>
  kable_styling()
```

While seeing these words is nice to get a taste for what the most used words are, it is also nice to have a more visual representation. Below is a word cloud containing the top 100 used words from the move. The bigger the word, the more it was used. By using a diagram like this, we can more easily see which words are the most commonly found, and the color codings show up what other words were used a similar amount of times.

```{r, echo=FALSE}
pinkalicious <- c("#FF6FFF", "#FF5D99", "hotpink", "#FFCFF7", "deeppink")


wordcloud(words = distinct_rat$word, freq = distinct_rat$n, min.freq = 1,
          max.words = 100, random.order = FALSE, rot.per = 0.35, 
          colors = pinkalicious)
```

Another way to look at the words used is shown below. Here, we can see the top 100 words in order of number of occurrences. The graph on the left shows how many times each of those words were used in the film. This gives us the same information as the word cloud, but it is a different way of looking at it!


```{r, include=FALSE}
plot_rat<-ratatouille|> mutate(word=str_to_lower(word),
  word = gsub("([[:punct:]])(?=[^[:alnum:]]*$)", "", word, perl = TRUE))|>
  count(word, sort=TRUE)|>
  anti_join(stop_words)|>
  slice(2:101)|>
  mutate(id = 1:100)
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
ggplot(plot_rat, aes(x = id, fill = reorder(word, -n), y=n)) +
  geom_col() +
  labs(fill = "Word", x="Words", y="Amount used") +
  theme_minimal()
```

Now that we know quite a bit about the contents of Ratatouille, we can look at how some of its statistics compared to other Disney Movies. Here, I decided to find the movies with the same director as Ratatouille to compare, so the following table shows the movies from this dataset that were directed by Brad Bird.

```{r, include=FALSE}
disney_movies <- read_csv("disney_movie_data_final.csv")
```

```{r, include=FALSE}
disney_movies[str_detect(disney_movies$`Music by`,"Giacchino"),]|>
  select(c(title, `Music by`, `Directed by`))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
same_director <- disney_movies[str_detect(disney_movies$`Directed by`, "Bird"), ] |>
  select(title, `Production company`, `Release date`, `Running time`, `Directed by`, `Music by`, Budget)|>
  slice(2:5)

kable(same_director, format = "html")|>
  kable_styling()
```

I found it interesting to see that all of the movies directed by Brad Bird in this dataset had music by Michael Giacchino. Looking further, Giacchino did the music for 11 of the movies in the dataset, including some great soundtracks including Cars 2 and Up.


```{r, echo=FALSE, message=FALSE, warning=FALSE}
disney_movies$`Running time` <- sub(" .*", "", disney_movies$`Running time`) 
disney_movies$`Running time` <- as.numeric(disney_movies$`Running time`) 
disney_movies <- disney_movies[!is.na(disney_movies$`Running time`),]


hist(disney_movies$`Running time`, freq = FALSE, col = "deeppink", main = "Distribution of Disney Movie Lengths", xlab="Running Time", ylab="Proportion of Movies")
```



```{r, echo=FALSE, include=FALSE, warning=FALSE}
library(plotly)

movies_by_time<- disney_movies[order(disney_movies$`Running time`), ]

# Define the number of bins
num_bins <- 109

# Create empty vectors to store bin boundaries and hover text
bin_boundaries <- numeric(num_bins + 1)
hover_text <- vector("list", num_bins)

# Calculate bin boundaries
bin_width <- (max(movies_by_time$`Running time`) - min(movies_by_time$`Running time`)) / num_bins
bin_boundaries <- seq(min(movies_by_time$`Running time`), max(movies_by_time$`Running time`) + bin_width, by = bin_width)

# Loop through each bin and populate hover text with movies falling into that bin
for (i in 1:num_bins) {
  bin_movies <- movies_by_time$title[movies_by_time$`Running time` >= bin_boundaries[i] & movies_by_time$`Running time` < bin_boundaries[i + 1]]
  bin_running_times <- movies_by_time$`Running time`[movies_by_time$`Running time` >= bin_boundaries[i] & movies_by_time$`Running time` < bin_boundaries[i + 1]]
  hover_text[[i]] <- paste("Movies:", paste(bin_movies, collapse = ", "), "<br>Running Times:", paste(bin_running_times, collapse = ", "))
}

# Create the histogram
histogram <- plot_ly(x = ~movies_by_time$`Running time`, type = "histogram", 
                     marker = list(color = "deeppink"), 
                     name = "Running Time",
                     hoverinfo = "text",
                     text = hover_text,
                     nbinsx = num_bins)

# Layout for the histogram
layout <- list(title = "Distribution of Movie Lengths",
               xaxis = list(title = "Running Time"),
               yaxis = list(title = "Frequency"))

# Display the interactive histogram
subplot(histogram, layout)


```



```{r, echo=FALSE, include=FALSE}
robotstxt::paths_allowed("https://www.rottentomatoes.com/m/ratatouille")

library(polite)
movie <- "https://www.rottentomatoes.com/m/ratatouille" |>
  bow() |> scrape()

all_critics <- "https://www.rottentomatoes.com/m/ratatouille/reviews" |> 
  bow() |> 
  scrape()
all_critics <- html_nodes(all_critics, ".review-text")
all_critics <- html_text(all_critics)

user_reviews <- "https://www.rottentomatoes.com/m/ratatouille/reviews?type=user" |> 
  bow() |> 
  scrape()
user_reviews <- html_nodes(user_reviews, ".js-review-text")
user_reviews <- html_text(user_reviews)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
user_reviews <- str_trim(user_reviews)
top_critics <- str_trim(all_critics)
user_review <- str_to_lower(user_reviews)
top_critics <- str_to_lower(all_critics)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
format_reviews <- data.frame(review = user_reviews)
other_format <- data.frame(review = all_critics)

neat_reviews <- format_reviews |>
  mutate(word = str_split(review, "\\s+")) |>
  select(word)|>
  unnest(word)

other_neat <- other_format |>
  mutate(word = str_split(review, "\\s+"))|>
  select(word)|>
  unnest(word)

all_reviews<-neat_reviews |> full_join(other_neat)

all_reviews<-all_reviews|>
  mutate(id = 1:2649)

```

```{r, message=FALSE, echo=FALSE, warning=FALSE}
sentiment_review <- all_reviews |>
  inner_join(get_sentiments("afinn"), by = "word") |>
  group_by(id) |>
  summarise(sentiment_review = sum(value))

sentiment_review <- sentiment_review |>
  mutate(sentiment = ifelse(sentiment_review > 0, "Positive",
                            ifelse(sentiment_review < 0, "Negative", "Neutral")))

sentiment_review <- inner_join(ratatouille, sentiment_review, by = "id")|>
  select(-id)

sentiment_review<-distinct(sentiment_review)

sentiment_review|>
  group_by(sentiment)|>
  mutate(n_words=n())|>
  ggplot(aes(x = word, y = sentiment_review, fill = sentiment)) +
  geom_bar(stat = "identity") +
  labs(title = "Sentiment Analysis of Reviews",
       x = "Words",
       y = "Score") +
  theme_minimal()+
  theme(axis.text.x = element_blank())+
  guides(fill = guide_legend(reverse = TRUE))+
  scale_fill_manual(values = c("Positive" = "deeppink", "Negative" = "darkred"))
```


